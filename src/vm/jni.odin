package vm
import "core:strings"
JNINativeInterface :: struct {
    vm: ^VM, // reserved0
    reserved1: rawptr,
    reserved2: rawptr,
    reserved3: rawptr,
    GetVersion: proc "c" (env: ^^JNINativeInterface) -> i32,
    DefineClass: rawptr,
    FindClass: rawptr,
    FromReflectedMethod: rawptr,
    FromReflectedField: rawptr,
    ToReflectedMethod: rawptr,
    GetSuperclass: rawptr,
    IsAssignableFrom: rawptr,
    ToReflectedField: rawptr,
    Throw: rawptr,
    ThrowNew: rawptr,
    ExceptionOccurred: rawptr,
    ExceptionDescribe: rawptr,
    ExceptionClear: rawptr,
    FatalError: rawptr,
    PushLocalFrame: rawptr,
    PopLocalFrame: rawptr,
    NewGlobalRef: rawptr,
    DeleteGlobalRef: rawptr,
    DeleteLocalRef: rawptr,
    IsSameObject: rawptr,
    NewLocalRef: rawptr,
    EnsureLocalCapacity: rawptr,
    AllocObject: rawptr,
    NewObject: rawptr,
    NewObjectV: rawptr,
    NewObjectA: rawptr,
    GetObjectClass: proc "c" (env: ^^JNINativeInterface, obj: ^ObjectHeader) -> ^Class,
    IsInstanceOf: rawptr,
    GetMethodID: rawptr,
    CallObjectMethod: rawptr,
    CallObjectMethodV: rawptr,
    CallObjectMethodA: rawptr,
    CallBooleanMethod: rawptr,
    CallBooleanMethodV: rawptr,
    CallBooleanMethodA: rawptr,
    CallByteMethod: rawptr,
    CallByteMethodV: rawptr,
    CallByteMethodA: rawptr,
    CallCharMethod: rawptr,
    CallCharMethodV: rawptr,
    CallCharMethodA: rawptr,
    CallShortMethod: rawptr,
    CallShortMethodV: rawptr,
    CallShortMethodA: rawptr,
    CallIntMethod: rawptr,
    CallIntMethodV: rawptr,
    CallIntMethodA: rawptr,
    CallLongMethod: rawptr,
    CallLongMethodV: rawptr,
    CallLongMethodA: rawptr,
    CallFloatMethod: rawptr,
    CallFloatMethodV: rawptr,
    CallFloatMethodA: rawptr,
    CallDoubleMethod: rawptr,
    CallDoubleMethodV: rawptr,
    CallDoubleMethodA: rawptr,
    CallVoidMethod: rawptr,
    CallVoidMethodV: rawptr,
    CallVoidMethodA: rawptr,
    CallNonvirtualObjectMethod: rawptr,
    CallNonvirtualObjectMethodV: rawptr,
    CallNonvirtualObjectMethodA: rawptr,
    CallNonvirtualBooleanMethod: rawptr,
    CallNonvirtualBooleanMethodV: rawptr,
    CallNonvirtualBooleanMethodA: rawptr,
    CallNonvirtualByteMethod: rawptr,
    CallNonvirtualByteMethodV: rawptr,
    CallNonvirtualByteMethodA: rawptr,
    CallNonvirtualCharMethod: rawptr,
    CallNonvirtualCharMethodV: rawptr,
    CallNonvirtualCharMethodA: rawptr,
    CallNonvirtualShortMethod: rawptr,
    CallNonvirtualShortMethodV: rawptr,
    CallNonvirtualShortMethodA: rawptr,
    CallNonvirtualIntMethod: rawptr,
    CallNonvirtualIntMethodV: rawptr,
    CallNonvirtualIntMethodA: rawptr,
    CallNonvirtualLongMethod: rawptr,
    CallNonvirtualLongMethodV: rawptr,
    CallNonvirtualLongMethodA: rawptr,
    CallNonvirtualFloatMethod: rawptr,
    CallNonvirtualFloatMethodV: rawptr,
    CallNonvirtualFloatMethodA: rawptr,
    CallNonvirtualDoubleMethod: rawptr,
    CallNonvirtualDoubleMethodV: rawptr,
    CallNonvirtualDoubleMethodA: rawptr,
    CallNonvirtualVoidMethod: rawptr,
    CallNonvirtualVoidMethodV: rawptr,
    CallNonvirtualVoidMethodA: rawptr,
    GetFieldID: proc "c" (env: ^^JNINativeInterface, class: ^Class, name: cstring, descriptor: cstring) -> ^Field ,
    GetObjectField: rawptr,
    GetBooleanField: rawptr,
    GetByteField: rawptr,
    GetCharField: rawptr,
    GetShortField: rawptr,
    GetIntField: proc "c" (env: ^^JNINativeInterface, obj: ^ObjectHeader, fld: ^Field) -> i32,
    GetLongField: rawptr,
    GetFloatField: rawptr,
    GetDoubleField: rawptr,
    SetObjectField: rawptr,
    SetBooleanField: rawptr,
    SetByteField: rawptr,
    SetCharField: rawptr,
    SetShortField: rawptr,
    SetIntField: rawptr,
    SetLongField: rawptr,
    SetFloatField: rawptr,
    SetDoubleField: rawptr,
    GetStaticMethodID: rawptr,
    CallStaticObjectMethod: rawptr,
    CallStaticObjectMethodV: rawptr,
    CallStaticObjectMethodA: rawptr,
    CallStaticBooleanMethod: rawptr,
    CallStaticBooleanMethodV: rawptr,
    CallStaticBooleanMethodA: rawptr,
    CallStaticByteMethod: rawptr,
    CallStaticByteMethodV: rawptr,
    CallStaticByteMethodA: rawptr,
    CallStaticCharMethod: rawptr,
    CallStaticCharMethodV: rawptr,
    CallStaticCharMethodA: rawptr,
    CallStaticShortMethod: rawptr,
    CallStaticShortMethodV: rawptr,
    CallStaticShortMethodA: rawptr,
    CallStaticIntMethod: rawptr,
    CallStaticIntMethodV: rawptr,
    CallStaticIntMethodA: rawptr,
    CallStaticLongMethod: rawptr,
    CallStaticLongMethodV: rawptr,
    CallStaticLongMethodA: rawptr,
    CallStaticFloatMethod: rawptr,
    CallStaticFloatMethodV: rawptr,
    CallStaticFloatMethodA: rawptr,
    CallStaticDoubleMethod: rawptr,
    CallStaticDoubleMethodV: rawptr,
    CallStaticDoubleMethodA: rawptr,
    CallStaticVoidMethod: rawptr,
    CallStaticVoidMethodV: rawptr,
    CallStaticVoidMethodA: rawptr,
    GetStaticFieldID: rawptr,
    GetStaticObjectField: rawptr,
    GetStaticBooleanField: rawptr,
    GetStaticByteField: rawptr,
    GetStaticCharField: rawptr,
    GetStaticShortField: rawptr,
    GetStaticIntField: rawptr,
    GetStaticLongField: rawptr,
    GetStaticFloatField: rawptr,
    GetStaticDoubleField: rawptr,
    SetStaticObjectField: rawptr,
    SetStaticBooleanField: rawptr,
    SetStaticByteField: rawptr,
    SetStaticCharField: rawptr,
    SetStaticShortField: rawptr,
    SetStaticIntField: rawptr,
    SetStaticLongField: rawptr,
    SetStaticFloatField: rawptr,
    SetStaticDoubleField: rawptr,
    NewString: rawptr,
    GetStringLength: rawptr,
    GetStringChars: rawptr,
    ReleaseStringChars: rawptr,
    NewStringUTF: rawptr,
    GetStringUTFLength: rawptr,
    GetStringUTFChars: rawptr,
    ReleaseStringUTFChars: rawptr,
    GetArrayLength: rawptr,
    NewObjectArray: rawptr,
    GetObjectArrayElement: rawptr,
    SetObjectArrayElement: rawptr,
    NewBooleanArray: rawptr,
    NewByteArray: rawptr,
    NewCharArray: rawptr,
    NewShortArray: rawptr,
    NewIntArray: rawptr,
    NewLongArray: rawptr,
    NewFloatArray: rawptr,
    NewDoubleArray: rawptr,
    GetBooleanArrayElements: rawptr,
    GetByteArrayElements: rawptr,
    GetCharArrayElements: rawptr,
    GetShortArrayElements: rawptr,
    GetIntArrayElements: rawptr,
    GetLongArrayElements: rawptr,
    GetFloatArrayElements: rawptr,
    GetDoubleArrayElements: rawptr,
    ReleaseBooleanArrayElements: rawptr,
    ReleaseByteArrayElements: rawptr,
    ReleaseCharArrayElements: rawptr,
    ReleaseShortArrayElements: rawptr,
    ReleaseIntArrayElements: rawptr,
    ReleaseLongArrayElements: rawptr,
    ReleaseFloatArrayElements: rawptr,
    ReleaseDoubleArrayElements: rawptr,
    GetBooleanArrayRegion: rawptr,
    GetByteArrayRegion: rawptr,
    GetCharArrayRegion: rawptr,
    GetShortArrayRegion: rawptr,
    GetIntArrayRegion: rawptr,
    GetLongArrayRegion: rawptr,
    GetFloatArrayRegion: rawptr,
    GetDoubleArrayRegion: rawptr,
    SetBooleanArrayRegion: rawptr,
    SetByteArrayRegion: rawptr,
    SetCharArrayRegion: rawptr,
    SetShortArrayRegion: rawptr,
    SetIntArrayRegion: rawptr,
    SetLongArrayRegion: rawptr,
    SetFloatArrayRegion: rawptr,
    SetDoubleArrayRegion: rawptr,
    RegisterNatives: rawptr,
    UnregisterNatives: rawptr,
    MonitorEnter: rawptr,
    MonitorExit: rawptr,
    GetJavaVM: rawptr,
    GetStringRegion: rawptr,
    GetStringUTFRegion: rawptr,
    GetPrimitiveArrayCritical: rawptr,
    ReleasePrimitiveArrayCritical: rawptr,
    GetStringCritical: rawptr,
    ReleaseStringCritical: rawptr,
    NewWeakGlobalRef: rawptr,
    DeleteWeakGlobalRef: rawptr,
    ExceptionCheck: rawptr,
    NewDirectByteBuffer: rawptr,
    GetDirectBufferAddress: rawptr,
    GetDirectBufferCapacity: rawptr,
    GetObjectRefType: rawptr,
}
JNI_VERSION_1_8 :: 0x00010008
jni_init :: proc(vm: ^VM) {
    vm.jni_env = new_clone(JNINativeInterface {
        vm = vm,
        GetVersion = proc "c" (env: ^^JNINativeInterface) -> i32 {
            return JNI_VERSION_1_8
        },
        GetObjectClass = proc "c" (env: ^^JNINativeInterface, obj: ^ObjectHeader) -> ^Class {
            return obj.class
        },
        GetFieldID = proc "c" (env: ^^JNINativeInterface, class: ^Class, name: cstring, descriptor: cstring) -> ^Field {
            context = vm.ctx
            oname := strings.clone_from_cstring(name) 
            defer delete(oname)
            return find_field(class, oname)
        },
        GetIntField = proc "c" (env: ^^JNINativeInterface, obj: ^ObjectHeader, fld: ^Field) -> i32 {
            context = vm.ctx
            ptr := (transmute(^i32)(transmute(int)obj + cast(int)fld.offset))
            return ptr^
        },

    })
}
